package {{ spec.title | caseLower }}

import (
	"encoding/json"
  "io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// DefaultClient is the client struct to access {{ spec.title }} services
type DefaultClient struct {
	client     *http.Client
	endpoint   string
	headers    map[string]string
	selfSigned bool
}

// NewDefaultClient initializes a new Appwrite client with default fields
func NewDefaultClient() Client {
	return &Client{
		client:   http.DefaultClient,
		endpoint: "{{spec.endpoint}}",
		headers: map[string]string{
			"content-type":               "",
			"x-sdk-version":              "{{ spec.title | caseDash }}:{{ language.name | caseLower }}:{{ sdk.version }}",
{% for key,header in spec.global.defaultHeaders %}
      "{{key}}" : "{{header}}",
{% endfor %}
		},
		selfSigned: false,
	}
}

func (clt *DefaultClient) SetEndpoint(endpoint string) {
	clt.endpoint = endpoint
}

func (clt *DefaultClient) SetSelfSigned(status bool) {
	clt.selfSigned = status
}

func (clt *DefaultClient) AddHeader(key string, value string) {
	clt.headers[key] = value
}
{% for header in spec.global.headers %}
func (clt *DefaultClient) Set{{header.key | caseUcfirst}}(value string) {
	clt.headers["{{header.name}}"] = value
}
{% endfor %}

func (clt *DefaultClient) Call(method string, path string, headers map[string]interface{}, params map[string]interface{}) (map[string]interface{}, error) {
	if clt.client == nil {
		// Create HTTP client
		clt.client = &http.Client{}
	}

	if clt.selfSigned {
		// Allow self signed requests
	}

	urlPath := clt.endpoint + path
	isGet := strings.ToUpper(method) == "GET"

	var reqBody *strings.Reader
	if !isGet {
		frm := url.Values{}
		for key, val := range params {
			frm.Add(key, ToString(val))
		}
		reqBody = strings.NewReader(frm.Encode())
	}

	// Create and modify HTTP request before sending
	req, err := http.NewRequest(method, urlPath, reqBody)
	if err != nil {
		return nil, err
	}

	// Set Client headers
	for key, val := range clt.headers {
		req.Header.Set(key, ToString(val))
	}

	//Set default headers
{% for key,header in spec.global.defaultHeaders %}
	req.Header.Set("{{key}}", "{{header}}")
{% endfor %}

	// Set Custom headers
	for key, val := range headers {
		req.Header.Set(key, ToString(val))
	}

	if isGet {
		q := req.URL.Query()
		for key, val := range params {
			q.Add(key, ToString(val))
		}
		req.URL.RawQuery = q.Encode()
	}

	// Make request
	response, err := clt.client.Do(req)
	if err != nil {
		return nil, err
	}

	// Handle response
	defer response.Body.Close()
 
	responseData, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return nil, err
	}

	var jsonResponse map[string]interface{}
	json.Unmarshal(responseData, &jsonResponse)

	return jsonResponse, nil
}
